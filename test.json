[
{"div_content": "# [PUBLIC] Proposal: On-Chain Automated Treasury Management\n###### tags: `grant`\n\n[toc]\n\n**Proponent:** 12wWLUd5qMzLFGqBsMnHLVFeTuYJwuo5ygMAxuSywrBX1XSF\n**Date:** 30.03.2023\n**Requested DOT:** $494,500 ~ 80,999 DOT (EMA7)\n**Short description:** TWAMM (Time Weighted Automated Market Maker) eliminates front-running vulnerabilities of traditional AMMs when executing large orders, especially in the context of passive procedures, such as governance. The proposed solution will be executed as a seamless extension to [pallet-asset-conversion](https://forum.polkadot.network/t/statemint-e-swap-discussion), thereby enhancing its capabilities as an embedded AMM.\n**Contact:** William Freudenberger (william@k-f.co)\n\n## Context of the Proposal\nThis grant is proposed by k/factory, a core development contributing to the [Centrifuge](http://centrifuge.io/) project. A team made of experienced Substrate builders and  a well established project in the Polkadot/Kusama ecosystem.\n\nWe have already received and successfully delivered multiple grants: \n1. We developed a Go-based RPC library for interacting with Substrate nodes ([GSRPC](https://github.com/centrifuge/go-substrate-rpc-client)) as one of the first on-chain treasury grants in the Polkadot treasury. \n2. We also built an early bridge together with ChainSafe in 2019 which was funded by a Web3 Foundation grant.\n3. Last but not least, [FUDGE](https://github.com/centrifuge/fudge) received a [Polkadot treasury grant](https://polkadot.polkassembly.io/treasury/184). This tool provides a simple and generic way to interact with and manipulate the database of a substrate-based blockchain\n\nFurthermore, the Centrifuge Chain is actively pushing XCM integrations in the Polkadot/Kusama ecosystem. All team members have worked extensively on launching the Centrifuge and Altair parachains. Various team members have presented talks on Polkadot related events such as Sub0, AmsterDOT, Polkadot Decoded, or Polkadot Parachain Summit.\n\nIn recent months, we have engaged in several discussions with the System Parachains Team at Parity regarding the development of a Multi-Asset Treasury. Of particular importance was the need to execute substantial orders securely, without succumbing to front-running vulnerabilities. Given that Parity is presently interfacing a Multi-Asset Treasury based on [this discussion](https://github.com/paritytech/polkadot/issues/5293), we would like to proffer our proposed solution to this challenge.\n\n### Team Members\n\nThe team working on this composed of\n\n* William Freudenberger (Rust developer, TWAMM project lead)\n* Jeroen Offerijns (CTO of k/factory)\n* Frederik Gartenmeister (Rust developer)\n* Branan Riley (Rust developer)\n\n## Problem Statement\n\nThe [ongoing discussion](https://forum.polkadot.network/t/statemint-update-roadmap/1200/) about automated market makers (AMMs) in the Statemint roadmap is mainly focused on improving the user and custodian experience by allowing small atomic swaps natively and making Statemint a central hub for asset deposits. This addresses important pain points by enabling transaction fees to be paid in non-native tokens and facilitating interaction with the entire asset variety of the ecosystem without requiring to run custom nodes or infrastructure.\n\nHowever, we believe that one aspect has been overlooked: the slow swaps of large volumes, which can be easily front-run or sandwiched. This is particularly relevant in the context of trades proposed through governance for use cases such as\n1. Paying out treasury grants, bounties or even [salaries](https://github.com/paritytech/substrate/pull/13378) in less volatile currencies (ie. stablecoins).\n2. Enabling parachains to build a DOT reserve which can be used to acquire a parachain lease, pay XCM fees, or [increase availability cores](https://forum.polkadot.network/t/parachain-scaling-by-parablock-splitting/341) during times of high demand (once supported).\n3. Governance deciding to invest part of the treasury into a token to diversify their treasury\n\nWhat we need is the opposite of what a traditional AMM provides: atomic swaps with immediate execution, even in relatively illiquid assets. A governance vote is unable to time the market and is highly predictable. Therefore, executing such a transaction as a market order on an AMM is problematic, as it will be guaranteed to be front-run. A better solution is to \"dollar-cost-average\" over a long period of time making it harder for price manipulation to affect the purchase.\n\n\n## Solution\n\nAt Centrifuge, we have researched distinct approaches of how to achieve hard-to-front-run slower transactions. In our opinion, the most elegant solution is [TWAMM (Time Weighted Automated Market Maker](https://www.paradigm.xyz/2021/07/twamm). We are of the firm conviction that the implementation of this model represents the most efficacious approach for executing token swaps in the context of slower and passive procedures, such as governance.\n\n### Time Weighted Average Market Maker\n\nThe TWAMM protocol represents a sophisticated advancement of the conventional constant product (Uniswap-v2 style) automated market maker (AMM) framework. It introduces a novel feature wherein users can split their orders into infinitely small fractions and execute them at each block interval. This feature addresses a significant shortcoming of traditional AMMs that encounter severe slippage issues when processing sizable orders, leaving them vulnerable to front-running tactics.\n\nFurthermore, the inherent risk associated with executing transactions within a single block is nullified by the TWAMM protocol. By segmenting orders into hundreds of small units spread over a prolonged time frame, the slippage rate of the embedded AMM is markedly reduced, and the cost of price manipulation is exponentially elevated. Artificially manipulating prices over multiple blocks creates an opportunity for other traders to exploit the price-inflation tactic, which ultimately undermines the manipulative effort. This innovative solution offers an elegant means of executing large orders even in relatively illiquid markets. It is particularly well-suited for slow automated processes, such as governance-controlled treasury operations, that can effectively implement a dollar-cost averaging strategy over extended periods.\n\n### Treasury Dashboard\n\nPractically, to manage the treasury portfolio requires the ability to submit long-term swap orders to the TWAMM pallet, to swap between different tokens. Relying purely on polkadot.js will make this hard to manage for council members or, with gov v2, the relevant collective members.\n\nMoreover, it is reasonable to anticipate the emergence of various treasuries beyond the primary DOT treasury in the future, such as those designated for the Fellowship and Ambassador programs, among others. These treasuries are likely to possess a unified logic situated in a centralized location, such as the pallet-treasury module on the Governance System (para-) chain. In addition, these treasuries may be granted authority to oversee assets on any other parachain that recognizes their corresponding origin. Consequently, holders of tokens will require an informative dashboard that presents all assets accessible within their treasury across the entirety of the network.\n\nTo simplify this, we aim to build a simple Treasury Dashboard, similar in vein to the existing [Staking Dashboard](https://staking.polkadot.network/#/overview). The goal would be to make a simple, open-source, easily self-hosted app that includes:\n- An aggregated overview of a treasury portfolio consisting of\n    - The current on-chain treasury portfolio\n    - Optional remote treasury account portfolios\n- An overview of proposed and currently being executed long-term swap orders for the treasury\n- And a tool to easily submit new long-term swap orders for voting\n\nTechnically, the goal would be to make this work for a single Substrate chain that includes the `asset-conversion` and `twamm` pallets. Ideally we can make this work using XCM for retrieving asset data, but alternatively we look to making this work directly on `orml-tokens` and/or `assets`. If possible, this would use [the same design system](https://github.com/paritytech/polkadot-dashboard-ui) as the Staking Dashboard.\n\n### Resources\n\n* [pallet-asset-conversion](https://github.com/paritytech/substrate/pull/12984)\n* [Original Paper](https://www.paradigm.xyz/2021/07/twamm) \n* [Reference implementation](https://github.com/para-dave/twamm)\n* [Mathematical details](https://docs.pulsarswap.com/advanced-topics/mathematical-principle-of-twamm) \n\n## Breakdown Deliverables\n\n### Milestone 1 - Implement TWAMM pallet for Substrate\n\nBased on [Paradigm Paper](https://www.paradigm.xyz/2021/07/twamm).\n\n#### Components\n\n##### Embedded AMM \n\n* Uses `pallet-asset-conversion`\n* Provides basic AMM functionality such as liquidity providing, removing and swapping token pairs\n* Triggers Virtual Order Execution of long-term orders on swap executions with configurable buffer period\n\n\n##### Long-term Orders\n* Splits orders into infinitely many infinitely small suborders for a given time interval\n* Keeps track of Virtual Order Execution\n* Orders can be canceled anytime\n* By setting a minimum block duration, enables advancing state for multiple blocks in a single computation\n\n\n##### Orderpool\n* Abstraction for set of long-term orders which sell a token at a constant rate to the embedded AMM\n* Serves as an order book which does not provide liquidity\n* Handles distribution logic for proceeds from long-term order sales to the corresponding owner \n\n#### Features\n* Lazy updating of virtual trades since last interaction triggered by executing _normal_ asset swaps on the embedded AMM\n* Pull-based approach of claiming proceeds: O(1) per asset\n\n\n*Estimated hours: 950h*\n*Estimated budget: 190,000$*\n\n### Milestone 2: Protocol improvements\n\n* Benchmark and optimize Virtual Order Execution data structures for Substrate such as utilizing Binary Search Trees\n* Research supporting generic embedded AMMs such as Curve\n* Add fuzzy tests\n* Documentation\n* Add runtime API calls to inform about\n    * Claimable proceeds for an order\n    * Aggregated order data for a given token\n    * Last Virtual Order Execution\n\n*Estimated hours: 400h*\n*Estimated budget: 80,000$*\n\n### Milestone 3 - Security Audit\n\n* Security audit from SR Labs\n\n*Budget: 120,000$*\n\n\n### Milestone 4 - Frontend development\n* Setup react.js-based frontend\n* Retrieve treasury overview data from on-chain and remote addresses\n* Retrieve proposed swaps in governance\n* Retrieve existing running swaps\n* Submit new long-term swap orders\n* Cancel long-term swap orders\n* Document and make the frontend easy to self-host\n\n*Estimated hours: 630h*\n*Estimated budget: 94,500$*\n\n## Budget Summary\nThis table provides a cost breakdown based on the milestones and deliverables above. Centrifuge charges $200 / hour of work for Substrate development and 150 $ / hour for frontend development.\n\n\n|        |                         |            | Estimates    |\n| ------ |:----------------------- |:---------- | ------------ |\n| **MS** | **Deliverable**         | **Hours**  | **Budget**   |\n| 1.     | TWAMM implementation    | 950        | $190,000     |\n| 2.     | Protocol improvements   | 400        | $80,000      |\n| 3.     | External Security Audit |  ---       | $120,000     |\n| 4.     | Frontend development    | 630        | $94,500      |\n|        | **Totals**              | **1980**   | **$494,500** |\n\n## Payment Conditions\n\nThe grant is proposed to the Polkadot Treasury and as such, if granted, will be paid in DOT.\nAt the time of writing the total grant amount of $494,500 results in a total grant amount of 80,999 DOT, based on EMA7 March 30th, 2023 (source: [Subscan](https://polkadot.subscan.io/tools/charts?type=price)). \n\nThe full deliverable will be found on https://github.com/centrifuge/twamm/."}
]